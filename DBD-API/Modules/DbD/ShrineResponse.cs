// <auto-generated />

namespace DBD_API.Modules.DbD
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ShrineResponse
    {
        [JsonProperty("items")]
        public Item[] Items { get; set; }

        [JsonProperty("startDate")]
        public DateTimeOffset StartDate { get; set; }

        [JsonProperty("endDate")]
        public DateTimeOffset EndDate { get; set; }

        [JsonProperty("week")]
        public long Week { get; set; }
    }

    public partial class Item
    {
        public string Name { get; set; }
        
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("bloodpointValue")]
        public long BloodpointValue { get; set; }

        [JsonProperty("experienceValue")]
        public long ExperienceValue { get; set; }

        [JsonProperty("unique")]
        public bool Unique { get; set; }

        [JsonProperty("purchased")]
        public bool Purchased { get; set; }

        [JsonProperty("version")]
        public string Version { get; set; }

        [JsonProperty("cost")]
        public Cost[] Cost { get; set; }
    }

    public partial class Cost
    {
        [JsonProperty("currencyId")]
        public string CurrencyId { get; set; }

        [JsonProperty("price")]
        public long Price { get; set; }
    }

    public partial class Welcome
    {
        public static Welcome FromJson(string json) => JsonConvert.DeserializeObject<Welcome>(json, DBD_API.Modules.DbD.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Welcome self) => JsonConvert.SerializeObject(self, DBD_API.Modules.DbD.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
